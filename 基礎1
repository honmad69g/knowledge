    //選択画像のパーツ別トリミングサイズ [eyes/nose/mouth]( left:X最小, top:Y最小, right:X最大, bottom:Y最大 )
    public ArrayList<Integer> trim(String position){
        //return定義
        ArrayList<Integer> res = new ArrayList<Integer>();

        //関数定義(partsチェック/トリミング位置(eyes,nose,mouth)/JSON変換
        String parts;
        Integer lfeyes = 0; Integer toeyes = 0; Integer rteyes = 0; Integer bmeyes = 0;
        Integer lfnose = 0; Integer tonose = 0; Integer rtnose = 0; Integer bmnose = 0;
        Integer lfmouth = 0; Integer tomouth = 0; Integer rtmouth = 0; Integer bmmouth = 0;
        Integer trimx = 0; Integer trimy = 0;
        String json = position;

        //トリミングサイズ探索
        try{ JSONArray array = new JSONArray(json);
            int count = array.length();
            for (int i=0; i<count; i++){
                JSONObject obj = array.getJSONObject(i);
                parts = obj.getString("parts");
                trimx = Integer.valueOf(obj.getString("X"));trimy = Integer.valueOf(obj.getString("Y"));

                if (parts.equals("eyes")){
                    if (lfeyes == 0){lfeyes = trimx;} if (toeyes == 0){toeyes = trimy;}
                    if (lfeyes > trimx){lfeyes = trimx;} if (toeyes > trimy){toeyes = trimy;}
                    if (rteyes < trimx){rteyes = trimx;} if (bmeyes < trimy){bmeyes = trimy;}
                    }
                if (parts.equals("nose")){
                    if (lfnose == 0){lfnose = trimx;} if (tonose == 0){tonose = trimy;}
                    if (lfnose > trimx){lfnose = trimx;} if (tonose > trimy){tonose = trimy;}
                    if (rtnose < trimx){rtnose = trimx;} if (bmnose < trimy){bmnose = trimy;}
                    }
                if (parts.equals("mouth")){
                    if (lfmouth == 0){lfmouth = trimx;} if (tomouth == 0){tomouth = trimy;}
                    if (lfmouth > trimx){lfmouth = trimx;} if (tomouth > trimy){tomouth = trimy;}
                    if (rtmouth < trimx){rtmouth = trimx;} if (bmmouth < trimy){bmmouth = trimy;}
                    }

            } res.add(lfeyes);res.add(toeyes);res.add(rteyes);res.add(bmeyes);
              res.add(lfnose);res.add(tonose);res.add(rtnose);res.add(bmnose);
              res.add(lfmouth);res.add(tomouth);res.add(rtmouth);res.add(bmmouth);
            } catch (JSONException e) { e.printStackTrace(); }
        return res; }

    //元画像のパーツ別座標 [eyes/nose/mouth]( left:X最小, top:Y最小 )
    public ArrayList<Integer> position(String position) {
        //return定義
        ArrayList<Integer> res = new ArrayList<Integer>();

        //関数定義(座標位置(eyes,nose,mouth)/JSON変換
        String parts;
        Integer lfeyes = 0; Integer toeyes = 0;Integer lfnose = 0; Integer tonose = 0;Integer lfmouth = 0; Integer tomouth = 0;
        Integer trimx = 0; Integer trimy = 0;
        String json = position;

        //座標位置探索
        try{ JSONArray array = new JSONArray(json);
            int count = array.length();
            for (int i=0; i<count; i++){
                JSONObject obj = array.getJSONObject(i);
                parts = obj.getString("parts");
                trimx = Integer.valueOf(obj.getString("X"));trimy = Integer.valueOf(obj.getString("Y"));

                if (parts.equals("eyes")){
                    if (lfeyes == 0){lfeyes = trimx;} if (toeyes == 0){toeyes = trimy;}
                    if (lfeyes > trimx){lfeyes = trimx;} if (toeyes > trimy){toeyes = trimy;}
                }
                if (parts.equals("nose")){
                    if (lfnose == 0){lfnose = trimx;} if (tonose == 0){tonose = trimy;}
                    if (lfnose > trimx){lfnose = trimx;} if (tonose > trimy){tonose = trimy;}
                }
                if (parts.equals("mouth")){
                    if (lfmouth == 0){lfmouth = trimx;} if (tomouth == 0){tomouth = trimy;}
                    if (lfmouth > trimx){lfmouth = trimx;} if (tomouth > trimy){tomouth = trimy;}
                }

            } res.add(lfeyes);res.add(toeyes);res.add(lfnose);res.add(tonose);res.add(lfmouth);res.add(tomouth);
        } catch (JSONException e) { e.printStackTrace(); }
        return res; }
